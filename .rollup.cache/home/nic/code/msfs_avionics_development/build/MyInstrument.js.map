{"version":3,"file":"MyInstrument.js","sourceRoot":"","sources":["../MyInstrument.tsx"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C,MAAM,YAAa,SAAQ,cAAc;IACvC,yDAAyD;IACzD,4DAA4D;IAC5D,6DAA6D;IAC7D,gEAAgE;IAChE,IAAI,UAAU;QACZ,OAAO,cAAc,CAAC;IACxB,CAAC;IAEM,iBAAiB;QACtB,+CAA+C;QAC/C,sEAAsE;QACtE,kEAAkE;QAClE,oEAAoE;QACpE,yDAAyD;QACzD,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,WAAW,CAAC,MAAM,CAChB,2BAAC,WAAW,OAAG,EACf,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAC7C,CAAC;IACJ,CAAC;CACF;AAED,kBAAkB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC","sourcesContent":["/// <reference types=\"@microsoft/msfs-types/Pages/VCockpit/Core/VCockpit\" />\nimport { FSComponent } from \"@microsoft/msfs-sdk\";\nimport { MyComponent } from \"./MyComponent\";\n\nclass MyInstrument extends BaseInstrument {\n  // Note that this class contains the property templateID,\n  // which returns a string.This property must be provided and\n  // the returned string must match the name of your instrument\n  // template you provided in the HTML, in this case MyInstrument.\n  get templateID(): string {\n    return \"MyInstrument\";\n  }\n\n  public connectedCallback(): void {\n    //! Always call super.connectedCallback() first\n    //! thing in any implementation of BaseInstrument.connectedCallback().\n    //! The base class does important work that is necessary for your \n    //! instrument to function inside its implementation.Failing to call\n    //! super will cause your instrument to fail during load.\n    super.connectedCallback();\n\n    FSComponent.render(\n      <MyComponent />,\n      document.getElementById(\"InstrumentContent\")\n    );\n  }\n}\n\nregisterInstrument(\"my-instrument\", MyInstrument);\n"]}